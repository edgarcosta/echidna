//////////////////////////////////////////////////////////////////////////////
//                                                                          //
//  Copyright (C) 2009 David Kohel <David.Kohel@univmed.fr>                 //
//                                                                          //
//  Distributed under the terms of the GNU General Public License (GPL)     //
//                  http://www.gnu.org/licenses/                            //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////

forward SatakeInvariantIdealParametrization0Characteristic3;

intrinsic HasRealMultiplication(JJ::SeqEnum[FldFinElt],D::RngIntElt) -> BoolElt
    {}
    require #JJ eq 5 and JJ[5] ne 0 :
	"Argument 1 must be a sequence of five Igusa invariants.";
    require D gt 0 and D mod 4 in {0,1} and not IsSquare(D) :
	"Argument 2 must be a real discriminant";
    return HasRealMultiplication(HyperellipticCurveFromIgusaInvariants(JJ),D);
end intrinsic;

intrinsic HasRealMultiplication(C::CrvHyp[FldFin],D::RngIntElt) -> BoolElt
    {}
    require D gt 0 and D mod 4 in {0,1} : "Argument 2 must be a real discriminant";
    FF := BaseField(C);
    p := Characteristic(FF);
    case p:
    when 2:
	require D in {5,8,12,13,17,24} : "Argument 2 must be in {5,8,12,13,17,24}.";
        /*
        Let x = (x1,x2,x3) be a affine level 2 theta null point, and s = (s1,s2,s3)
        be the symmetric invariants of x.  The Igusa invariants of this curve are:

        JJ = ( 1 : 
               (s2^2/s3)^2 : 
               (s2^2/s3)^4 :
               ((s1^2*s3^4 + s2^8 + s2^6*s3)/s3^4)^2 : s3^2 ).

        Conversely the point s can be recovered from JJ over a finite field of
        characteristic 2 (extracting square roots). 

        Extract square roots to find s1, s2, s3:
        */
	JJ := IgusaInvariants(C);
	require JJ[1] ne 0 : "Argument 1 must be an ordinary genus 2 curve.";
	JJ := IgusaToNormalizedIgusaInvariants(JJ);
	ss := Sqrt(JJ[2]); // s2^2/s3
	require JJ[2]^2 eq JJ[3] : "Argument 1 must be an ordinary genus 2 curve.";
	s1 := Sqrt(Sqrt(JJ[4])-ss^3-ss^4); 
	s3 := Sqrt(JJ[5]);
	s2 := Sqrt(ss*s3);
	assert JJ eq [ 1, ss^2, ss^4, ((s1^2*s3^4 + s2^8 + s2^6*s3)/s3^4)^2, s3^2 ];
	case D:
	when 5:
            return s1^4 + s3 eq 0;
        when 8:
	    if s1 eq 0 then
		F := s3 + s2 + 1;
	    else
		F := s1^5 + s1^3*s2 + s1^2*s2^2 + s1^2*s2 + s1^2*s3 + s1*s3 + s2*s3 + s3^2 + s3;
	    end if;
	    return F eq 0;
        when 12:
	    if s1^4 + s2 eq 0 then
		F := s1^13 + s1^7 + s1^6*s3 + s1^5 + s1^3 + s1^2*s3 + s1*s3^2 + s3^3;
	    elif s1^3 + s1*s2 + s2^2 + s2 eq 0 then
		F := s1^7 + s1^5*s2 + s1^5 + s1^3 + s1^2*s2*s3
		    + s1^2*s3 + s1*s2^3 + s1*s2^2 + s1*s3^2 + s3^3;
	    else
		F := s1^10 + s1^7*s3 + s1^6*s2^2 + s1^6*s2 + s1^5*s2*s3
		    + s1^5*s3 + s1^4*s2^4 + s1^4*s2^2 + s1^3*s3 + s1^2*s2^3
		    + s1^2*s2*s3^2 + s1^2*s3^2 + s1*s2^3*s3 + s1*s2^2*s3
		    + s1*s3^3 + s2^5 + s2^3 + s3^4;
	    end if;
	    return F eq 0;
        when 13:
	    if s1^4 + s3 eq 0 then return false; end if;
            F := s1^20 + s1^16*s3 + s1^12*s3 + s1^8*s3^2 + s1^4*s2^4 + s1^4*s3^4
                + s1^4*s3^3 + s2^4*s3 + s3^5 + s3^4 + s3^3;
	    return F eq 0;
        when 17:
	    F := s1^40 + s1^34*(s2^2*s3 + s3) + s1^32*(s2^2*s3^3 + s2^2*s3 + s3^3) +
		s1^30*(s2^6*s3 + s2^4*s3 + s2^2*s3^3 + s2^2*s3 + s3^5 + s3^4 + s3^3 + s3) + 
		s1^28*(s2^8 + s2^4*s3^3 + s2^4 + s2^2*s3^5 + s2^2*s3^2 + s3^5 + s3^3) +
		s1^26*(s2^8*s3 + s2^6*s3^3 + s2^6*s3 + s2^4*s3^4 + s2^4*s3^3 +
		s2^4*s3^2 + s2^4*s3 + s2^2*s3^7 + s2^2*s3^5 + s2^2*s3^3 +
		s2^2*s3^2 + s2^2*s3 + s3^8 + s3^7 + s3^5 + s3^3) +
		s1^24*(s2^8*s3^4 + s2^8*s3^2 +
		s2^6*s3^5 + s2^6*s3^2 + s2^4*s3^5 + s2^4*s3^4 + 
		s2^4*s3^3 + s2^2*s3^7 + s2^2*s3^5 + s2^2*s3^4 + 
		s2^2*s3^3 + s2^2*s3^2 + s3^9 + s3^7 + s3^4 + s3^3 + s3^2) +
		s1^22*(s2^10*s3^3 + s2^8*s3^3 + 
		s2^8*s3^2 + s2^8*s3 + s2^6*s3^5 + s2^6*s3^4 + 
		s2^6*s3^3 + s2^6*s3^2 + s2^6*s3 + s2^4*s3^5 + 
		s2^4*s3^2 + s2^2*s3^9 + s2^2*s3^8 + s2^2*s3^7 + 
		s2^2*s3^6 + s2^2*s3^3 + s2^2*s3^2 + s3^9 + s3^4 + s3^3) +
		s1^20*(s2^16 + s2^12 + s2^10*s3^3 + 
		s2^10*s3 + s2^8*s3^5 + s2^8*s3^4 + s2^8 + 
		s2^6*s3^7 + s2^6*s3^4 + s2^6*s3^3 + s2^6*s3 + 
		s2^4*s3^8 + s2^4*s3^7 + s2^4*s3^6 + s2^4*s3^4 + 
		s2^4 + s2^2*s3^9 + s2^2*s3^8 + s2^2*s3^7 + 
		s2^2*s3^4 + s2^2*s3^3 + s3^11 + s3^10 + s3^8 + s3^5 + s3^4) +
		s1^18*(s2^14*s3 + s2^12*s3^3 + 
		s2^12*s3 + s2^10*s3^3 + s2^10*s3^2 + s2^8*s3^6 + 
		s2^8*s3^5 + s2^8*s3^4 + s2^8*s3^2 + s2^6*s3^9 + 
		s2^6*s3^6 + s2^6*s3^5 + s2^6*s3^3 + s2^6*s3^2 + 
		s2^6*s3 + s2^4*s3^10 + s2^4*s3^8 + s2^4*s3^7 + 
		s2^4*s3^2 + s2^4*s3 + s2^2*s3^8 + s2^2*s3^5 + 
		s2^2*s3^4 + s3^12 + s3^10 + s3^9 + s3^5 + s3^3) +
		s1^16*(s2^12*s3^4 + s2^12*s3^3 + s2^12 + 
		s2^10*s3^7 + s2^10*s3^5 + s2^10*s3^4 + s2^8*s3^8 +
		s2^8*s3^6 + s2^8*s3^5 + s2^8*s3^4 + s2^8*s3^3 + 
		s2^6*s3^7 + s2^6*s3^5 + s2^6*s3^3 + s2^4*s3^11 + 
		s2^4*s3^8 + s2^4*s3^7 + s2^2*s3^9 + s2^2*s3^6 + 
		s2^2*s3^3 + s3^12 + s3^9 + s3^8 + s3^7 + s3^6 + s3^5) +
		s1^14*(s2^18*s3 + s2^14*s3^3 + s2^14*s3 +
		s2^10*s3^6 + s2^10*s3^5 + s2^10*s3^4 + 
		s2^10*s3^2 + s2^8*s3^6 + s2^8*s3^5 + s2^8*s3^2 + 
		s2^8*s3 + s2^6*s3^11 + s2^6*s3^10 + s2^6*s3^8 + 
		s2^4*s3^6 + s2^4*s3^4 + s2^4*s3^3 + s2^4*s3 + 
		s2^2*s3^12 + s2^2*s3^11 + s2^2*s3^10 + s2^2*s3^8 +
		s2^2*s3^6 + s2^2*s3^5 + s2^2*s3^4 + s2^2*s3^3 + 
		s3^16 + s3^14 + s3^13 + s3^11 + s3^7 + s3^3) +
		s1^12*(s2^20 + s2^18*s3 + s2^16*s3^4 + 
		s2^16*s3^3 + s2^16 + s2^14*s3^5 + s2^14*s3^2 + 
		s2^14*s3 + s2^12*s3^5 + s2^12*s3^3 + s2^12*s3^2 + 
		s2^12 + s2^10*s3^9 + s2^10*s3^7 + s2^10*s3^5 + 
		s2^10*s3^4 + s2^10*s3 + s2^8*s3^12 + s2^8*s3^10 + 
		s2^8*s3^6 + s2^8*s3^5 + s2^8*s3^2 + s2^8 + 
		s2^6*s3^13 + s2^6*s3^11 + s2^6*s3^10 + s2^6*s3^5 +
		s2^6*s3^4 + s2^6*s3^3 + s2^6*s3^2 + s2^6*s3 + 
		s2^4*s3^13 + s2^4*s3^12 + s2^4*s3^11 + s2^4*s3^9 +
		s2^4*s3^8 + s2^4*s3^7 + s2^4*s3^5 + s2^2*s3^15 + 
		s2^2*s3^11 + s2^2*s3^8 + s2^2*s3^7 + s2^2*s3^6 + 
		s2^2*s3^5 + s2^2*s3^4 + s3^14 + s3^12 + 
		s3^11 + s3^10 + s3^9 + s3^8 + s3^6 + s3^5) +
		s1^10*(s2^20*s3 + s2^16*s3^4 + s2^16*s3^3 + 
		s2^16*s3^2 + s2^14*s3^2 + s2^14*s3 + s2^12*s3^8 + 
		s2^12*s3^7 + s2^12*s3^5 + s2^12*s3^3 + s2^12*s3 + 
		s2^10*s3^8 + s2^10*s3^7 + s2^10*s3^6 + s2^10*s3^5 +
		s2^10*s3^4 + s2^10*s3^3 + s2^8*s3^10 + s2^8*s3^8 +
		s2^8*s3^6 + s2^8*s3^4 + s2^8*s3^2 + s2^6*s3^13 +
		s2^6*s3^9 + s2^6*s3^8 + s2^6*s3^7 + s2^6*s3^6 + 
		s2^6*s3^5 + s2^6*s3^3 + s2^6*s3^2 + s2^6*s3 + 
		s2^4*s3^15 + s2^4*s3^10 + s2^4*s3^9 + s2^4*s3^8 + 
		s2^4*s3^7 + s2^4*s3^6 + s2^2*s3^16 + s2^2*s3^14 + 
		s2^2*s3^11 + s2^2*s3^10 + s2^2*s3^9 + s2^2*s3^8 + 
		s2^2*s3^4 + s2^2*s3^3 + s3^17 + s3^16 + 
		s3^14 + s3^13 + s3^9 + s3^8 + s3^5) + 
		s1^8*(s2^24 + s2^20 + s2^18*s3^2 + s2^16*s3^4 + 
		s2^14*s3^5 + s2^14*s3^4 + s2^14*s3^3 + s2^14*s3^2 + 
		s2^14*s3 + s2^12*s3^4 + s2^12*s3^3 + s2^12 + 
		s2^10*s3^11 + s2^10*s3^8 + s2^10*s3^2 + s2^8*s3^12 + 
		s2^8*s3^10 + s2^8*s3^9 + s2^8*s3^8 + s2^8*s3^7 + 
		s2^8*s3^5 + s2^8 + s2^6*s3^15 + s2^6*s3^9 + 
		s2^6*s3^6 + s2^6*s3^5 + s2^6*s3^3 + s2^6*s3^2 + 
		s2^4*s3^15 + s2^4*s3^14 + s2^4*s3^12 + s2^4*s3^10 + 
		s2^4*s3^9 + s2^4*s3^8 + s2^4*s3^7 + s2^4*s3^6 + 
		s2^4*s3^5 + s2^4*s3^3 + s2^2*s3^17 + s2^2*s3^14 + 
		s2^2*s3^13 + s2^2*s3^10 + s2^2*s3^9 + s2^2*s3^8 + 
		s2^2*s3^6 + s2^2*s3^5 + s2^2*s3^4 + s3^18 + s3^17 +
		s3^15 + s3^12 + s3^11 + s3^10 + s3^6 + s3^5) +
		s1^6*(s2^20*s3^2 + s2^18*s3^4 + s2^18*s3^3 + 
		s2^16*s3^6 + s2^16*s3^2 + s2^14*s3^9 + s2^14*s3^8 + 
		s2^14*s3^7 + s2^14*s3^3 + s2^12*s3^10 + s2^12*s3^8 + 
		s2^12*s3^7 + s2^10*s3^13 + s2^10*s3^11 + s2^10*s3^10 +
		s2^10*s3^9 + s2^10*s3^7 + s2^10*s3^6 + s2^10*s3^5 + 
		s2^10*s3^4 + s2^10*s3^3 + s2^10*s3^2 + s2^8*s3^14 + 
		s2^8*s3^13 + s2^8*s3^12 + s2^8*s3^11 + s2^8*s3^9 + 
		s2^8*s3^7 + s2^8*s3^5 + s2^8*s3^4 + s2^6*s3^15 + 
		s2^6*s3^14 + s2^6*s3^12 + s2^6*s3^9 + s2^6*s3^8 + 
		s2^6*s3^4 + s2^6*s3^3 + s2^6*s3^2 + s2^4*s3^17 + 
		s2^4*s3^16 + s2^4*s3^15 + s2^4*s3^14 + s2^4*s3^11 + 
		s2^4*s3^5 + s2^4*s3^4 + s2^2*s3^19 + s2^2*s3^14 + 
		s2^2*s3^11 + s2^2*s3^10 + s2^2*s3^8 + s2^2*s3^6 + 
		s2^2*s3^5 + s2^2*s3^4 + s3^20 + s3^19 + s3^15 + 
		s3^14 + s3^13 + s3^12 + s3^11 + s3^10 + s3^9 + s3^8 + s3^6) +
		s1^4*(s2^22*s3^3 + s2^22*s3 + 
		s2^20*s3^4 + s2^18*s3^7 + s2^18*s3^3 + s2^18*s3 + 
		s2^16*s3^8 + s2^16*s3^6 + s2^16*s3^4 + s2^16*s3^3 + 
		s2^14*s3^9 + s2^14*s3^7 + s2^14*s3^5 + s2^14*s3^4 + 
		s2^14*s3^3 + s2^14*s3 + s2^12*s3^12 + s2^12*s3^11 + 
		s2^12*s3^8 + s2^12*s3^6 + s2^12*s3^4 + s2^10*s3^11 + 
		s2^10*s3^9 + s2^10*s3^6 + s2^10*s3^5 + s2^10*s3^4 + 
		s2^10*s3 + s2^8*s3^16 + s2^8*s3^15 + s2^8*s3^13 + 
		s2^8*s3^10 + s2^8*s3^9 + s2^8*s3^7 + s2^8*s3^3 + 
		s2^6*s3^15 + s2^6*s3^14 + s2^6*s3^13 + s2^6*s3^10 + 
		s2^6*s3^5 + s2^6*s3^3 + s2^4*s3^17 + s2^4*s3^14 + 
		s2^4*s3^12 + s2^4*s3^10 + s2^4*s3^9 + s2^4*s3^8 + 
		s2^4*s3^6 + s2^4*s3^4 + s2^2*s3^19 + s2^2*s3^18 + 
		s2^2*s3^16 + s2^2*s3^15 + s2^2*s3^14 + s2^2*s3^13 + 
		s2^2*s3^11 + s2^2*s3^9 + s2^2*s3^7 + s2^2*s3^6 + 
		s2^2*s3^5 + s3^21 + s3^16 + s3^15 + s3^13 + 
		s3^12 + s3^11 + s3^10 + s3^8 + s3^7 + s3^6) +
		s1^2*(s2^22*s3^3 + s2^22*s3^2 + s2^20*s3^5 + s2^18*s3^7 + 
		s2^18*s3^6 + s2^18*s3^4 + s2^18*s3^3 + s2^16*s3^2 + 
		s2^14*s3^11 + s2^14*s3^10 + s2^14*s3^9 + s2^14*s3^8 + 
		s2^14*s3^5 + s2^14*s3^4 + s2^14*s3^2 + s2^12*s3^13 + 
		s2^12*s3^9 + s2^12*s3^8 + s2^12*s3^6 + s2^12*s3^5 + 
		s2^10*s3^15 + s2^10*s3^14 + s2^10*s3^13 + s2^10*s3^10 + 
		s2^10*s3^9 + s2^10*s3^7 + s2^10*s3^6 + s2^10*s3^3 + 
		s2^8*s3^11 + s2^8*s3^10 + s2^8*s3^8 + s2^8*s3^6 + 
		s2^8*s3^4 + s2^8*s3^2 + s2^6*s3^17 + s2^6*s3^16 + 
		s2^6*s3^14 + s2^6*s3^13 + s2^6*s3^12 + s2^6*s3^9 + 
		s2^6*s3^6 + s2^6*s3^5 + s2^6*s3^3 + s2^4*s3^19 + 
		s2^4*s3^17 + s2^4*s3^16 + s2^4*s3^14 + s2^4*s3^13 + 
		s2^4*s3^11 + s2^4*s3^10 + s2^4*s3^8 + s2^4*s3^7 + 
		s2^4*s3^4 + s2^2*s3^21 + s2^2*s3^20 + s2^2*s3^19 + 
		s2^2*s3^18 + s2^2*s3^13 + s2^2*s3^9 + s2^2*s3^7 + 
		s2^2*s3^6 + s3^21 + s3^18 + s3^16 + s3^15 + s3^14 + s3^9 + s3^7) +
		s2^26*s3 + s2^24*s3^4 + s2^22*s3^5 + 
		s2^22*s3 + s2^20*s3^5 + s2^20*s3^3 + s2^18*s3^9 + s2^18*s3^6 + s2^16*s3^12 + 
		s2^16*s3^10 + s2^16*s3^9 + s2^16*s3^8 + s2^16*s3^7 + s2^16*s3^6 + 
		s2^16*s3^5 + s2^16*s3^3 + s2^14*s3^13 + s2^14*s3^11 + s2^14*s3^9 + 
		s2^14*s3^8 + s2^14*s3^7 + s2^14*s3^6 + s2^14*s3^5 + s2^14*s3^4 + s2^14*s3 + 
		s2^12*s3^13 + s2^12*s3^12 + s2^12*s3^9 + s2^12*s3^6 + s2^12*s3^3 + 
		s2^10*s3^14 + s2^10*s3^11 + s2^10*s3^10 + s2^10*s3^9 + s2^10*s3^8 + 
		s2^10*s3^6 + s2^10*s3^5 + s2^10*s3 + s2^8*s3^17 + s2^8*s3^14 + s2^8*s3^13 + 
		s2^8*s3^11 + s2^8*s3^10 + s2^8*s3^8 + s2^8*s3^5 + s2^8*s3^4 + s2^8*s3^3 + 
		s2^6*s3^19 + s2^6*s3^16 + s2^6*s3^14 + s2^6*s3^11 + s2^6*s3^4 + 
		s2^4*s3^20 + s2^4*s3^19 + s2^4*s3^18 + s2^4*s3^17 + s2^4*s3^16 + 
		s2^4*s3^12 + s2^4*s3^11 + s2^4*s3^9 + s2^4*s3^8 + s2^4*s3^5 + s2^2*s3^21 +
		s2^2*s3^20 + s2^2*s3^19 + s2^2*s3^18 + s2^2*s3^16 + s2^2*s3^15 + 
		s2^2*s3^14 + s2^2*s3^9 + s2^2*s3^7 + s2^2*s3^6 + s3^24 + s3^23 + s3^22 + 
		s3^20 + s3^19 + s3^17 + s3^14 + s3^13 + s3^12 + s3^10 + s3^7;
	    return F eq 0;
        when 24:
	    F := s1^30 + s1^26*s2^2 + s1^25*s2^2 + s1^24*s2^4 + s1^24*s2^2 + s1^24*s3^2 + 
		s1^23*s2^3 + s1^23*s2 + s1^23*s3^2 + s1^22*s2^4 + s1^22*s2^2*s3 + s1^22*s3 +
		s1^21*s2^4 + s1^21*s2^2 + s1^21*s2*s3^2 + s1^20*s2^3*s3 + s1^20*s2^2*s3^2 + 
		s1^20*s3^4 + s1^20*s3^3 + s1^20*s3^2 + s1^19*s2^6 + s1^19*s2^4 + s1^19*s3^2 +
		s1^18*s2^8 + s1^18*s2^6 + s1^18*s2^4 + s1^18*s2^3 + s1^18*s2^2*s3^2 + 
		s1^18*s2^2 + s1^18*s2*s3^3 + s1^18*s3^4 + s1^17*s2^7 + s1^17*s2^4*s3^2 + 
		s1^17*s2^4 + s1^17*s2^3 + s1^17*s2^2*s3 + s1^17*s3^4 + s1^17*s3 + s1^16*s2^8 + 
		s1^16*s2^6*s3 + s1^16*s2^6 + s1^16*s2^5*s3 + s1^16*s2^4*s3^2 + 
		s1^16*s2^3*s3 + s1^16*s2^2*s3^2 + s1^16*s2^2*s3 + s1^16*s2*s3^2 + s1^16*s3^4 + 
		s1^16*s3^2 + s1^15*s2^7 + s1^15*s2^6 + s1^15*s2^5*s3^2 + s1^15*s2^5 + 
		s1^15*s2^4*s3^2 + s1^15*s2^4 + s1^15*s2^2*s3^4 + s1^15*s2^2*s3^2 + 
		s1^15*s2*s3 + s1^15*s3^4 + s1^15*s3^3 + s1^14*s2^10 + s1^14*s2^7*s3 + 
		s1^14*s2^6*s3 + s1^14*s2^6 + s1^14*s2^5*s3 + s1^14*s2^5 + s1^14*s2^4*s3^3 + 
		s1^14*s2^4*s3 + s1^14*s2^4 + s1^14*s2^2*s3^4 + s1^14*s2*s3^3 + s1^14*s3^2 + 
		s1^13*s2^9 + s1^13*s2^5*s3^2 + s1^13*s2^5 + s1^13*s2^4*s3^2 + s1^13*s2^4 + 
		s1^13*s2^3*s3^4 + s1^13*s2^2*s3^2 + s1^13*s3^6 + s1^12*s2^12 + s1^12*s2^10 +
		s1^12*s2^8*s3^2 + s1^12*s2^8*s3 + s1^12*s2^8 + s1^12*s2^7*s3 + s1^12*s2^7 + 
		s1^12*s2^6*s3^2 + s1^12*s2^5*s3^3 + s1^12*s2^5*s3 + s1^12*s2^5 + 
		s1^12*s2^4*s3^3 + s1^12*s2^4*s3 + s1^12*s2^4 + s1^12*s2^3*s3^2 + 
		s1^12*s2^3*s3 + s1^12*s2^2*s3^5 + s1^12*s2^2*s3 + s1^12*s2*s3^5 + 
		s1^12*s2*s3^2 + s1^12*s2*s3 + s1^12*s3^6 + s1^12*s3^4 + s1^11*s2^6*s3 + 
		s1^11*s2^5 + s1^11*s2^4*s3^2 + s1^11*s2^3*s3^4 + s1^11*s2^3*s3 + s1^11*s2^3 +
		s1^11*s2^2*s3^4 + s1^11*s2^2*s3^3 + s1^11*s2^2*s3^2 + s1^11*s2^2*s3 + 
		s1^11*s2*s3^6 + s1^11*s2*s3^4 + s1^11*s3^6 + s1^11*s3^2 + s1^10*s2^8*s3^2 + 
		s1^10*s2^7*s3 + s1^10*s2^6 + s1^10*s2^5*s3^2 + s1^10*s2^5*s3 + 
		s1^10*s2^4*s3^4 + s1^10*s2^4*s3^2 + s1^10*s2^4*s3 + s1^10*s2^3*s3^5 + 
		s1^10*s2^3*s3^3 + s1^10*s2^2*s3^5 + s1^10*s2^2*s3^4 + s1^10*s2^2*s3 + 
		s1^10*s2*s3^5 + s1^10*s2*s3^3 + s1^10*s3^8 + s1^10*s3^7 + s1^10*s3^5 + 
		s1^10*s3^3 + s1^9*s2^6*s3 + s1^9*s2^6 + s1^9*s2^5*s3 + s1^9*s2^4*s3^4 + 
		s1^9*s2^4*s3^3 + s1^9*s2^4*s3^2 + s1^9*s2^4*s3 + s1^9*s2^4 + s1^9*s2^3*s3^2 + 
		s1^9*s2^3*s3 + s1^9*s2^2*s3^4 + s1^9*s2*s3^6 + s1^9*s2*s3^4 + s1^9*s2*s3^3 + 
		s1^9*s2*s3^2 + s1^9*s3^6 + s1^9*s3^5 + s1^8*s2^10*s3^2 + s1^8*s2^9*s3 + 
		s1^8*s2^8*s3^4 + s1^8*s2^8*s3^2 + s1^8*s2^5*s3^3 + s1^8*s2^4*s3^2 + 
		s1^8*s2^4*s3 + s1^8*s2^3*s3^5 + s1^8*s2^3*s3^4 + s1^8*s2^3*s3^3 + 
		s1^8*s2^3*s3 + s1^8*s2^2*s3^6 + s1^8*s2^2*s3^3 + s1^8*s2*s3^7 + s1^8*s2*s3^4 + 
		s1^8*s3^8 + s1^8*s3^7 + s1^8*s3^5 + s1^8*s3^4 + s1^8*s3^3 + s1^8*s3^2 + 
		s1^7*s2^9*s3^2 + s1^7*s2^8*s3 + s1^7*s2^8 + s1^7*s2^7*s3^2 + s1^7*s2^6*s3^4 + 
		s1^7*s2^6 + s1^7*s2^4*s3^4 + s1^7*s2^4*s3^3 + s1^7*s2^4*s3 + 
		s1^7*s2^3*s3^2 + s1^7*s2^3*s3 + s1^7*s2^2*s3^5 + s1^7*s2*s3^2 + s1^7*s3^3 + 
		s1^6*s2^11*s3 + s1^6*s2^10 + s1^6*s2^9*s3 + s1^6*s2^8*s3^3 + s1^6*s2^8 + 
		s1^6*s2^7*s3^2 + s1^6*s2^7*s3 + s1^6*s2^6*s3^4 + s1^6*s2^6*s3^3 + 
		s1^6*s2^6*s3^2 + s1^6*s2^6*s3 + s1^6*s2^6 + s1^6*s2^5*s3^3 + s1^6*s2^5 + 
		s1^6*s2^4*s3^2 + s1^6*s2^4*s3 + s1^6*s2^3*s3^5 + s1^6*s2^3*s3^4 + 
		s1^6*s2^3*s3^3 + s1^6*s2^3*s3^2 + s1^6*s2^3*s3 + s1^6*s2^2*s3^8 + 
		s1^6*s2^2*s3^4 + s1^6*s2^2*s3^3 + s1^6*s2^2*s3^2 + s1^6*s2*s3^6 + s1^6*s3^6 + 
		s1^6*s3^4 + s1^6*s3^3 + s1^5*s2^9 + s1^5*s2^7*s3^4 + s1^5*s2^6*s3^3 + 
		s1^5*s2^6*s3^2 + s1^5*s2^6 + s1^5*s2^5*s3^4 + s1^5*s2^5*s3^2 + s1^5*s2^5 + 
		s1^5*s2^4*s3^6 + s1^5*s2^4*s3^3 + s1^5*s2^3*s3^3 + s1^5*s2^2*s3^4 + 
		s1^5*s2*s3^8 + s1^5*s2*s3^5 + s1^5*s2*s3^4 + s1^5*s3^8 + s1^5*s3^7 + 
		s1^5*s3^6 + s1^4*s2^10 + s1^4*s2^9*s3^3 + s1^4*s2^8*s3^4 + s1^4*s2^8*s3^2 + 
		s1^4*s2^8*s3 + s1^4*s2^8 + s1^4*s2^7*s3 + s1^4*s2^6*s3^5 + s1^4*s2^6*s3^2 + 
		s1^4*s2^5*s3^5 + s1^4*s2^5*s3^4 + s1^4*s2^4*s3^8 + s1^4*s2^4*s3^6 + 
		s1^4*s2^4*s3^5 + s1^4*s2^4*s3^4 + s1^4*s2^4*s3 + s1^4*s2^3*s3^5 + 
		s1^4*s2^3*s3^3 + s1^4*s2^2*s3^8 + s1^4*s2*s3^7 + s1^4*s2*s3^6 + s1^4*s2*s3^5 +
		s1^4*s3^10 + s1^4*s3^9 + s1^4*s3^8 + s1^4*s3^6 + s1^3*s2^9 + s1^3*s2^8 + 
		s1^3*s2^7*s3^4 + s1^3*s2^7 + s1^3*s2^6*s3^3 + s1^3*s2^6 + s1^3*s2^5*s3^6 + 
		s1^3*s2^5*s3^4 + s1^3*s2^5*s3 + s1^3*s2^4*s3^6 + s1^3*s2^4*s3^5 + 
		s1^3*s2^3*s3^6 + s1^3*s2^3*s3^4 + s1^3*s2^3*s3^3 + s1^3*s2^3*s3^2 + 
		s1^3*s2^2*s3^8 + s1^3*s2^2*s3^6 + s1^3*s2^2*s3^2 + s1^3*s2*s3^4 + s1^3*s3^8 +
		s1^3*s3^5 + s1^3*s3^4 + s1^2*s2^12 + s1^2*s2^10*s3^2 + s1^2*s2^9*s3^3 + 
		s1^2*s2^9*s3 + s1^2*s2^8*s3 + s1^2*s2^8 + s1^2*s2^7*s3^5 + s1^2*s2^7*s3^3 + 
		s1^2*s2^7*s3 + s1^2*s2^7 + s1^2*s2^6*s3^5 + s1^2*s2^6*s3^4 + s1^2*s2^6*s3 + 
		s1^2*s2^5*s3^5 + s1^2*s2^5*s3^4 + s1^2*s2^5*s3^3 + s1^2*s2^4*s3^7 + 
		s1^2*s2^4*s3^5 + s1^2*s2^4*s3^4 + s1^2*s2^4*s3^3 + s1^2*s2^3*s3^6 + 
		s1^2*s2^3*s3^5 + s1^2*s2^3*s3^3 + s1^2*s2^3*s3^2 + s1^2*s2^2*s3^7 + 
		s1^2*s2^2*s3^6 + s1^2*s2*s3^5 + s1^2*s3^10 + s1^2*s3^6 + s1*s2^11 + 
		s1*s2^7*s3^2 + s1*s2^7*s3 + s1*s2^7 + s1*s2^6*s3^2 + s1*s2^5*s3^6 + 
		s1*s2^5*s3^4 + s1*s2^5*s3^2 + s1*s2^5*s3 + s1*s2^4*s3^5 + s1*s2^4*s3^3 + 
		s1*s2^3*s3^8 + s1*s2^3*s3^3 + s1*s2^3*s3^2 + s1*s2^2*s3^8 + s1*s2^2*s3^7 + 
		s1*s2^2*s3^4 + s1*s2^2*s3^3 + s1*s2*s3^8 + s1*s2*s3^5 + s1*s3^10 + s1*s3^8 +
		s1*s3^7 + s1*s3^6 + s1*s3^4 + s2^14 + s2^12 + s2^10*s3^2 + s2^10*s3 + s2^10 +
		s2^9 + s2^8*s3^4 + s2^8 + s2^7*s3^5 + s2^7*s3^3 + s2^7 + s2^6*s3^6 + 
		s2^6*s3^4 + s2^6*s3^3 + s2^6*s3 + s2^5*s3^7 + s2^5*s3^5 + s2^5*s3^3 + 
		s2^5*s3^2 + s2^4*s3^8 + s2^4*s3^7 + s2^4*s3^5 + s2^4*s3^4 + s2^4*s3^3 + 
		s2^4*s3^2 + s2^3*s3^6 + s2^3*s3^3 + s2^2*s3^10 + s2^2*s3^9 + s2^2*s3^8 + 
		s2^2*s3^5 + s2^2*s3^3 + s2*s3^8 + s2*s3^6 + s2*s3^5 + s2*s3^4 + s3^12 + 
		s3^10 + s3^9 + s3^8 + s3^7 + s3^5 + s3^4;
	    return F eq 0;
        end case;
    when 3:
	require D in {4,5,8,9,12,13,16,17,20} : "Argument 2 must be in {4,5,8,9,12,13,16,17,20}.";
	HD := RosenhainHumbertPolynomial(FF,D);
	ee := RosenhainInvariantsOverSplittingField(C);
	for g in Sym(6) do
	    if Evaluate(HD,RosenhainImage(ee,g)) eq 0 then
		return true;
	    end if;
	end for;
	return false;
    else
	require D in {4,5,8,9,12,13,16,17,20,21} :
	    "Argument 2 must be in {4,5,8,9,12,13,16,17,20,21}.";
	require false : "Not implemented error (char > 3).";
    end case;
end intrinsic;

function SatakeInvariantIdealParametrization0Characteristic3(D,JJ)
    /* This function is unfinished, we need */
    assert D mod 4 eq 0;
    K := Universe(JJ);
    P<s2,t2,s4> := PolynomialRing(K,3);
    if D eq 8 then
	H := t2 - s2;
    elif D eq 12 then
	H := s2^2 + s2 + 2*t2^2 + s4;
    else
	error if false, "Real discriminant D must be 8 or 12."; 
    end if;
    jj := [
        s2 * (s2 - t2 + 1) * (s2^2 - s2*t2 - s2 - s4),
        s2 * (s2 - t2 + 1) * (s2^2 - s2*t2 - s2 - s4) *
        (s2^4 - s2^3*t2 + s2^3 - s2^2*t2^2 + s2^2 + s2*t2^3 - s2*t2^2 - s2*t2*s4 + s2*t2 - s2*s4 - s2 + t2^2*s4 - t2*s4 - s4^2),
        (s2^4 + s2^3*t2 + s2^2*t2^2 + s2^2*t2 + s2^2*s4 - s2^2 - s2*t2^2 - s2*t2*s4 - s2*t2 - s2*s4 - s2 + s4^2) *      
        (s2^8 + s2^7*t2 - s2^7 + s2^6*t2^2 - s2^6*s4 - s2^5*t2^3 - s2^5*t2*s4 - s2^5*t2 - s2^5 - s2^4*t2^4 
        + s2^4*t2^3 + s2^4*t2 + s2^4*s4^2 + s2^4 - s2^3*t2^5 + s2^3*t2^3*s4 + s2^3*t2^2 + s2^2*t2^4*s4 + s2^2*t2^4 
        - s2^2*t2^3 - s2^2*t2*s4 - s2^2*t2 + s2^2 - s2*t2^3*s4^2 + s2*s4^3 + s2*s4^2 - s4^4),
        (s2 - t2 + 1) * (s2^2 - s2*t2 - s2 - s4) * 
        -s2 * (s2^10*t2^2 - s2^10*s4 - s2^9 + s2^7*t2^5 - s2^7*t2^3*s4 - s2^6*s4^3 + s2^6 +  s2^4*t2^8 
        - s2^4*t2^6*s4 - s2^4*t2^2*s4^3 - s2^4*t2^2 + s2^4*s4^4 + s2^4*s4 + s2^3*t2^6 + s2^3*t2^3*s4^3 
        + s2^3*t2^3 + s2^3 + s2*t2^5*s4^3 - s2*t2^3*s4^4 - s2*t2^2*s4^3 + s2*s4^4 + s4^6),
	-s2^2 * (s2 - t2 + 1)^6 * (s2^2 - s2*t2 - s2 - s4)^6 ];
    JJ := IgusaToNormalizedIgusaInvariants(JJ); 
    II := ideal< P | [ H ] cat [ jj[i]-JJ[i]*jj[1]^i : i in [1..5] ] >;
    return II;
end function;

    
    
